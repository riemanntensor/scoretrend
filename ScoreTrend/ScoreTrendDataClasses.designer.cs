#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScoreTrend
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="scoretrend_db")]
	public partial class ScoreTrendDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertleague(league instance);
    partial void Updateleague(league instance);
    partial void Deleteleague(league instance);
    partial void Insertplayer(player instance);
    partial void Updateplayer(player instance);
    partial void Deleteplayer(player instance);
    partial void Insertteam(team instance);
    partial void Updateteam(team instance);
    partial void Deleteteam(team instance);
    partial void Insertstatistic(statistic instance);
    partial void Updatestatistic(statistic instance);
    partial void Deletestatistic(statistic instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    #endregion
		
		public ScoreTrendDataClassesDataContext() : 
				base(global::ScoreTrend.Properties.Settings.Default.scoretrend_dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreTrendDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreTrendDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreTrendDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScoreTrendDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<league> leagues
		{
			get
			{
				return this.GetTable<league>();
			}
		}
		
		public System.Data.Linq.Table<player> players
		{
			get
			{
				return this.GetTable<player>();
			}
		}
		
		public System.Data.Linq.Table<team> teams
		{
			get
			{
				return this.GetTable<team>();
			}
		}
		
		public System.Data.Linq.Table<statistic> statistics
		{
			get
			{
				return this.GetTable<statistic>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.leagues")]
	public partial class league : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _leagueid;
		
		private string _name;
		
		private string _city;
		
		private string _state;
		
		private EntitySet<team> _teams;
		
		private EntitySet<user> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnleagueidChanging(int value);
    partial void OnleagueidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    #endregion
		
		public league()
		{
			this._teams = new EntitySet<team>(new Action<team>(this.attach_teams), new Action<team>(this.detach_teams));
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leagueid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int leagueid
		{
			get
			{
				return this._leagueid;
			}
			set
			{
				if ((this._leagueid != value))
				{
					this.OnleagueidChanging(value);
					this.SendPropertyChanging();
					this._leagueid = value;
					this.SendPropertyChanged("leagueid");
					this.OnleagueidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="league_team", Storage="_teams", ThisKey="leagueid", OtherKey="leagueid")]
		public EntitySet<team> teams
		{
			get
			{
				return this._teams;
			}
			set
			{
				this._teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="league_user", Storage="_users", ThisKey="leagueid", OtherKey="leagueid")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_teams(team entity)
		{
			this.SendPropertyChanging();
			entity.league = this;
		}
		
		private void detach_teams(team entity)
		{
			this.SendPropertyChanging();
			entity.league = null;
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.league = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.league = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.players")]
	public partial class player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _firstname;
		
		private string _lastname;
		
		private int _teamid;
		
		private int _playerid;
		
		private EntitySet<statistic> _statistics;
		
		private EntitySet<user> _users;
		
		private EntityRef<team> _team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnteamidChanging(int value);
    partial void OnteamidChanged();
    partial void OnplayeridChanging(int value);
    partial void OnplayeridChanged();
    #endregion
		
		public player()
		{
			this._statistics = new EntitySet<statistic>(new Action<statistic>(this.attach_statistics), new Action<statistic>(this.detach_statistics));
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			this._team = default(EntityRef<team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamid", DbType="Int NOT NULL")]
		public int teamid
		{
			get
			{
				return this._teamid;
			}
			set
			{
				if ((this._teamid != value))
				{
					if (this._team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteamidChanging(value);
					this.SendPropertyChanging();
					this._teamid = value;
					this.SendPropertyChanged("teamid");
					this.OnteamidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int playerid
		{
			get
			{
				return this._playerid;
			}
			set
			{
				if ((this._playerid != value))
				{
					this.OnplayeridChanging(value);
					this.SendPropertyChanging();
					this._playerid = value;
					this.SendPropertyChanged("playerid");
					this.OnplayeridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="player_statistic", Storage="_statistics", ThisKey="playerid", OtherKey="playerid")]
		public EntitySet<statistic> statistics
		{
			get
			{
				return this._statistics;
			}
			set
			{
				this._statistics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="player_user", Storage="_users", ThisKey="playerid", OtherKey="playerid")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_player", Storage="_team", ThisKey="teamid", OtherKey="teamid", IsForeignKey=true)]
		public team team
		{
			get
			{
				return this._team.Entity;
			}
			set
			{
				team previousValue = this._team.Entity;
				if (((previousValue != value) 
							|| (this._team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._team.Entity = null;
						previousValue.players.Remove(this);
					}
					this._team.Entity = value;
					if ((value != null))
					{
						value.players.Add(this);
						this._teamid = value.teamid;
					}
					else
					{
						this._teamid = default(int);
					}
					this.SendPropertyChanged("team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_statistics(statistic entity)
		{
			this.SendPropertyChanging();
			entity.player = this;
		}
		
		private void detach_statistics(statistic entity)
		{
			this.SendPropertyChanging();
			entity.player = null;
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.player = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.player = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.teams")]
	public partial class team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _leagueid;
		
		private string _name;
		
		private int _teamid;
		
		private EntitySet<player> _players;
		
		private EntityRef<league> _league;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnleagueidChanging(int value);
    partial void OnleagueidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnteamidChanging(int value);
    partial void OnteamidChanged();
    #endregion
		
		public team()
		{
			this._players = new EntitySet<player>(new Action<player>(this.attach_players), new Action<player>(this.detach_players));
			this._league = default(EntityRef<league>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leagueid", DbType="Int NOT NULL")]
		public int leagueid
		{
			get
			{
				return this._leagueid;
			}
			set
			{
				if ((this._leagueid != value))
				{
					if (this._league.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnleagueidChanging(value);
					this.SendPropertyChanging();
					this._leagueid = value;
					this.SendPropertyChanged("leagueid");
					this.OnleagueidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int teamid
		{
			get
			{
				return this._teamid;
			}
			set
			{
				if ((this._teamid != value))
				{
					this.OnteamidChanging(value);
					this.SendPropertyChanging();
					this._teamid = value;
					this.SendPropertyChanged("teamid");
					this.OnteamidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_player", Storage="_players", ThisKey="teamid", OtherKey="teamid")]
		public EntitySet<player> players
		{
			get
			{
				return this._players;
			}
			set
			{
				this._players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="league_team", Storage="_league", ThisKey="leagueid", OtherKey="leagueid", IsForeignKey=true)]
		public league league
		{
			get
			{
				return this._league.Entity;
			}
			set
			{
				league previousValue = this._league.Entity;
				if (((previousValue != value) 
							|| (this._league.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._league.Entity = null;
						previousValue.teams.Remove(this);
					}
					this._league.Entity = value;
					if ((value != null))
					{
						value.teams.Add(this);
						this._leagueid = value.leagueid;
					}
					else
					{
						this._leagueid = default(int);
					}
					this.SendPropertyChanged("league");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_players(player entity)
		{
			this.SendPropertyChanging();
			entity.team = this;
		}
		
		private void detach_players(player entity)
		{
			this.SendPropertyChanging();
			entity.team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[statistics]")]
	public partial class statistic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _playerid;
		
		private System.Nullable<int> _runs;
		
		private System.Nullable<int> _strikeouts;
		
		private System.Nullable<int> _batAvg;
		
		private System.Nullable<int> _hits;
		
		private System.Data.Linq.Binary _playerPhoto;
		
		private EntityRef<player> _player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnplayeridChanging(int value);
    partial void OnplayeridChanged();
    partial void OnrunsChanging(System.Nullable<int> value);
    partial void OnrunsChanged();
    partial void OnstrikeoutsChanging(System.Nullable<int> value);
    partial void OnstrikeoutsChanged();
    partial void OnbatAvgChanging(System.Nullable<int> value);
    partial void OnbatAvgChanged();
    partial void OnhitsChanging(System.Nullable<int> value);
    partial void OnhitsChanged();
    partial void OnplayerPhotoChanging(System.Data.Linq.Binary value);
    partial void OnplayerPhotoChanged();
    #endregion
		
		public statistic()
		{
			this._player = default(EntityRef<player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int playerid
		{
			get
			{
				return this._playerid;
			}
			set
			{
				if ((this._playerid != value))
				{
					if (this._player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplayeridChanging(value);
					this.SendPropertyChanging();
					this._playerid = value;
					this.SendPropertyChanged("playerid");
					this.OnplayeridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_runs", DbType="Int")]
		public System.Nullable<int> runs
		{
			get
			{
				return this._runs;
			}
			set
			{
				if ((this._runs != value))
				{
					this.OnrunsChanging(value);
					this.SendPropertyChanging();
					this._runs = value;
					this.SendPropertyChanged("runs");
					this.OnrunsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strikeouts", DbType="Int")]
		public System.Nullable<int> strikeouts
		{
			get
			{
				return this._strikeouts;
			}
			set
			{
				if ((this._strikeouts != value))
				{
					this.OnstrikeoutsChanging(value);
					this.SendPropertyChanging();
					this._strikeouts = value;
					this.SendPropertyChanged("strikeouts");
					this.OnstrikeoutsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_batAvg", DbType="Int")]
		public System.Nullable<int> batAvg
		{
			get
			{
				return this._batAvg;
			}
			set
			{
				if ((this._batAvg != value))
				{
					this.OnbatAvgChanging(value);
					this.SendPropertyChanging();
					this._batAvg = value;
					this.SendPropertyChanged("batAvg");
					this.OnbatAvgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hits", DbType="Int")]
		public System.Nullable<int> hits
		{
			get
			{
				return this._hits;
			}
			set
			{
				if ((this._hits != value))
				{
					this.OnhitsChanging(value);
					this.SendPropertyChanging();
					this._hits = value;
					this.SendPropertyChanged("hits");
					this.OnhitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerPhoto", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary playerPhoto
		{
			get
			{
				return this._playerPhoto;
			}
			set
			{
				if ((this._playerPhoto != value))
				{
					this.OnplayerPhotoChanging(value);
					this.SendPropertyChanging();
					this._playerPhoto = value;
					this.SendPropertyChanged("playerPhoto");
					this.OnplayerPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="player_statistic", Storage="_player", ThisKey="playerid", OtherKey="playerid", IsForeignKey=true)]
		public player player
		{
			get
			{
				return this._player.Entity;
			}
			set
			{
				player previousValue = this._player.Entity;
				if (((previousValue != value) 
							|| (this._player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._player.Entity = null;
						previousValue.statistics.Remove(this);
					}
					this._player.Entity = value;
					if ((value != null))
					{
						value.statistics.Add(this);
						this._playerid = value.playerid;
					}
					else
					{
						this._playerid = default(int);
					}
					this.SendPropertyChanged("player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<int> _teamid;
		
		private System.Nullable<int> _leagueid;
		
		private System.Nullable<int> _playerid;
		
		private int _userid;
		
		private string _firstname;
		
		private string _lastname;
		
		private System.Nullable<int> _authorized;
		
		private EntityRef<player> _player;
		
		private EntityRef<league> _league;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnteamidChanging(System.Nullable<int> value);
    partial void OnteamidChanged();
    partial void OnleagueidChanging(System.Nullable<int> value);
    partial void OnleagueidChanged();
    partial void OnplayeridChanging(System.Nullable<int> value);
    partial void OnplayeridChanged();
    partial void OnuseridChanging(int value);
    partial void OnuseridChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnauthorizedChanging(System.Nullable<int> value);
    partial void OnauthorizedChanged();
    #endregion
		
		public user()
		{
			this._player = default(EntityRef<player>);
			this._league = default(EntityRef<league>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamid", DbType="Int")]
		public System.Nullable<int> teamid
		{
			get
			{
				return this._teamid;
			}
			set
			{
				if ((this._teamid != value))
				{
					this.OnteamidChanging(value);
					this.SendPropertyChanging();
					this._teamid = value;
					this.SendPropertyChanged("teamid");
					this.OnteamidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leagueid", DbType="Int")]
		public System.Nullable<int> leagueid
		{
			get
			{
				return this._leagueid;
			}
			set
			{
				if ((this._leagueid != value))
				{
					if (this._league.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnleagueidChanging(value);
					this.SendPropertyChanging();
					this._leagueid = value;
					this.SendPropertyChanged("leagueid");
					this.OnleagueidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerid", DbType="Int")]
		public System.Nullable<int> playerid
		{
			get
			{
				return this._playerid;
			}
			set
			{
				if ((this._playerid != value))
				{
					if (this._player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplayeridChanging(value);
					this.SendPropertyChanging();
					this._playerid = value;
					this.SendPropertyChanged("playerid");
					this.OnplayeridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="NVarChar(15)")]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(15)")]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorized", DbType="Int")]
		public System.Nullable<int> authorized
		{
			get
			{
				return this._authorized;
			}
			set
			{
				if ((this._authorized != value))
				{
					this.OnauthorizedChanging(value);
					this.SendPropertyChanging();
					this._authorized = value;
					this.SendPropertyChanged("authorized");
					this.OnauthorizedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="player_user", Storage="_player", ThisKey="playerid", OtherKey="playerid", IsForeignKey=true)]
		public player player
		{
			get
			{
				return this._player.Entity;
			}
			set
			{
				player previousValue = this._player.Entity;
				if (((previousValue != value) 
							|| (this._player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._player.Entity = null;
						previousValue.users.Remove(this);
					}
					this._player.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._playerid = value.playerid;
					}
					else
					{
						this._playerid = default(Nullable<int>);
					}
					this.SendPropertyChanged("player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="league_user", Storage="_league", ThisKey="leagueid", OtherKey="leagueid", IsForeignKey=true)]
		public league league
		{
			get
			{
				return this._league.Entity;
			}
			set
			{
				league previousValue = this._league.Entity;
				if (((previousValue != value) 
							|| (this._league.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._league.Entity = null;
						previousValue.users.Remove(this);
					}
					this._league.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._leagueid = value.leagueid;
					}
					else
					{
						this._leagueid = default(Nullable<int>);
					}
					this.SendPropertyChanged("league");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
